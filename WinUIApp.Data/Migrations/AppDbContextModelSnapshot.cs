// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinUiApp.Data;

#nullable disable

namespace WinUIApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WinUiApp.Data.Data.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrinkId"));

                    b.Property<decimal>("AlcoholContent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DrinkURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrinkId");

                    b.HasIndex("BrandId");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkCategory", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId1")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId1")
                        .HasColumnType("int");

                    b.HasKey("DrinkId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("DrinkId1");

                    b.ToTable("DrinkCategories");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkOfTheDay", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DrinkTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DrinkId");

                    b.ToTable("DrinkOfTheDays");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("RatingValue")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId", "DrinkId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.UserDrink", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("DrinkId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserDrinks");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VoteId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("DrinkId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkCategory", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Category", null)
                        .WithMany("DrinkCategories")
                        .HasForeignKey("CategoryId1");

                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", null)
                        .WithMany("DrinkCategories")
                        .HasForeignKey("DrinkId1");

                    b.Navigation("Category");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkOfTheDay", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Rating", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Review", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.UserDrink", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", null)
                        .WithMany("UserDrinks")
                        .HasForeignKey("DrinkId1");

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany("UserDrinks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Vote", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", null)
                        .WithMany("Votes")
                        .HasForeignKey("DrinkId1");

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany("Votes")
                        .HasForeignKey("UserId1");

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Category", b =>
                {
                    b.Navigation("DrinkCategories");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.Navigation("DrinkCategories");

                    b.Navigation("UserDrinks");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.User", b =>
                {
                    b.Navigation("UserDrinks");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
